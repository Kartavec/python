"""
1. Реализовать класс «Дата», функция-конструктор которого должна принимать дату в виде
строки формата «день-месяц-год». В рамках класса реализовать два метода. Первый,
с декоратором @classmethod. Он должен извлекать число, месяц, год и преобразовывать их
тип к типу «Число». Второй, с декоратором @staticmethod, должен проводить валидацию числа,
месяца и года (например, месяц — от 1 до 12). Проверить работу полученной структуры на
реальных данных.
"""

class Date:
    def __init__(self, date):
        self.date = date

    @classmethod
    def date_to_int(cls, date):
        date_int = list(map(int, date.split('-')))
        return date_int

    @staticmethod
    def check_input(date_input):
        date_int = list(map(int, date_input.split('-')))
        if date_int[0] > 31:
            print('неверно введено число')
        elif date_int[1] > 12:
            print('неверно введен месяц')
        elif len(date_int) != 3:
            print('неверный формат даты. введите в формате «день-месяц-год»')
        else:
            print('дата введена корректно')
            return date_input


date_value = Date('34-12-2202')

print(Date.date_to_int('11-12-2202'))

print(Date.check_input('31-12-2202-5'))

print('------------------------------------------------------------------------------------------')

"""2. Создайте собственный класс-исключение, обрабатывающий ситуацию деления на ноль. Проверьте 
его работу на данных, вводимых пользователем. При вводе нуля в качестве делителя программа должна 
корректно обработать эту ситуацию и не завершиться с ошибкой.
"""

class self_exception(Exception):
    def __init__(self, error_text):
        self.error_txt = error_text

input_num = input('введите число: ')

try:
    input_num = int(input_num)
    if input_num == 0:
        raise self_exception('делить на "0" нельзя!')
except ValueError:
    print('не число!')
except self_exception as err:
    print(err)
else:
    print('деление возможно')


print('------------------------------------------------------------------------------------------')

"""3. Создайте собственный класс-исключение, который должен проверять содержимое списка на наличие 
только чисел. Проверить работу исключения на реальном примере. Запрашивать у пользователя данные и 
заполнять список необходимо только числами. Класс-исключение должен контролировать типы данных 
элементов списка.
Примечание: длина списка не фиксирована. Элементы запрашиваются бесконечно, пока пользователь сам не 
остановит работу скрипта, введя, например, команду «stop». При этом скрипт завершается, сформированный 
список с числами выводится на экран.
"""


class stop_exception(Exception):
    def __init__(self, stop_text):
        self.error_txt = stop_text

new_array = []
marker = True
while True:
    try:
        new_elem = input('введите число. для прекращения ввода "stop" :')
        if new_elem == 'stop':
            raise stop_exception('введено стоп-слово')
        new_array.append(int(new_elem))
    except ValueError:
        print('не число!')
    except stop_exception as err:
        print(err)
        break
print(new_array)

print('------------------------------------------------------------------------------------------')



