# 3. Создайте собственный класс-исключение, который должен проверять содержимое списка на наличие только чисел.
# Проверить работу исключения на реальном примере. Необходимо запрашивать у пользователя данные и заполнять список.
# Класс-исключение должен контролировать типы данных элементов списка.
# Примечание: длина списка не фиксирована. Элементы запрашиваются бесконечно, пока пользователь сам не остановит работу
# скрипта, введя, например, команду “stop”. При этом скрипт завершается, сформированный список выводится на экран.
# Подсказка: для данного задания примем, что пользователь может вводить только числа и строки. При вводе пользователем
# очередного элемента необходимо реализовать проверку типа элемента и вносить его в список, только если введено число.
# Класс-исключение должен не позволить пользователю ввести текст (не число) и отобразить соответствующее сообщение.
# При этом работа скрипта не должна завершаться.

class Data:
    def __init__(self):
        self.data = []

    def get_elemenet(self, element):
        if element.isdigit():
            self.data.append(int(num))
        else:
            raise NotANumber

    def __str__(self):
        return self.data.__str__()


class NotANumber(Exception):
    def __init__(self, message="Не число"):
        self.message = message
        super().__init__(self.message)

    def __str__(self):
        return f'{self.message}'


dt = Data()
while True:
    num = input("Введите новый элемент списка (stop - выход): ")
    if num == 'stop':
        break
    try:
        dt.get_elemenet(num)
    except NotANumber as e:
        print(e)
print(f'Введенный список: {dt}')
